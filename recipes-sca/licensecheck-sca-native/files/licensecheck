#!/usr/bin/env python3

# BSD 2-Clause License
#
# Copyright (c) 2020, Konrad Weihmann
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import argparse
import re

from license_expression import Licensing, LicenseSymbol
from boolean import AND, OR
from csv import DictReader


def validate_expression(lic_literals, parsed_list):
    res = []
    for item in parsed_list.args:
        if isinstance(item, LicenseSymbol):
            if item.key in lic_literals:
                res.append("1")
            else:
                res.append("0")
        elif isinstance(item, OR):
            _, sub = validate_expression(lic_literals, item)
            res.append("( {} )".format(" | ".join(sub)))
        elif isinstance(item, AND):
            _, sub = validate_expression(lic_literals, item)
            res.append("( {} )".format(" & ".join(sub)))
    return (" & ".join(res), res)


def explode_plus_modifier(prefix, version):
    res = []
    valid_mods = ["1.0", "1.1", "2.0", "2.1", "3.0"]
    valid_mods = valid_mods[valid_mods.index(version):]
    for i in valid_mods:
        res.append("{}{}".format(prefix, i))
    return "( {} )".format(" OR ".join(res))


def create_parser():
    parser = argparse.ArgumentParser(description='License check')
    parser.add_argument("--ignore", default="license,licence,copying,readme",
                        help="Comma seperated list of files to ignore")
    parser.add_argument("--noassertdefault", default="CLOSED",
                        help="In case no assertation can be made on a file, take this license as the basis")
    parser.add_argument("license", help="Currently set license")
    parser.add_argument("lcresult", help="Result of lc run")

    return parser.parse_args()


def read_lc_result(args):
    res = []
    ig_pattern = "|".join([x.strip() for x in args.ignore.split(",") if x])
    with open(args.lcresult) as i:
        reader = DictReader(i)
        for row in reader:
            if not re.match(ig_pattern, row["filename"], re.IGNORECASE):
                _lic = row["license"]
                # -only suffix will applied automatically
                _lic = _lic.rstrip("-only")
                # replace -or-later with +, which is exploded afterwards
                _lic = _lic.replace("-or-later", "+")
                # replace NOASSERTION with the default from argparse
                _lic = _lic.replace("NOASSERTION", args.noassertdefault)
                for m in re.finditer(r"(^|\s)(?P<prefix>[A-Za-z\-]+)(?P<version>\d\.\d)\+", _lic):
                    _lic = _lic.replace(m.group(0), explode_plus_modifier(
                        m.group("prefix"), m.group("version")))
                res.append(_lic)
    return " AND ".join(res)


if __name__ == '__main__':
    _args = create_parser()
    licensing = Licensing()
    _set = licensing.parse(_args.license)
    _det = licensing.parse(read_lc_result(_args))
    _res, _ = validate_expression([x.key for x in _set.literals], _det)

    if not eval(_res):
        print("Wrong license found. Detected '{}', but set is '{}'".format(
            _det.simplify().render(), _set.render()))
