- name: SSH server security
  gather_facts: false
  hosts: 127.0.0.1
  connection: local
  
  tasks:
    - stat:
        path: "{{ sysconfdir }}/ssh/sshd_config"
      register: sshd_result

    - name: "[error] SSHd Key exchange"
      lineinfile: 
        dest: "{{ sysconfdir }}/ssh/sshd_config"
        regexp: '^KexAlgorithms'
        line: 'KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256'
      when:
        - sshd_result.stat.exists == true

    - name: "[error] SSHd ciphers"
      lineinfile: 
        dest: "{{ sysconfdir }}/ssh/sshd_config"
        regexp: '^Ciphers' 
        line: 'Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr'
      when:
        - sshd_result.stat.exists == true
        
    - name: "[error] SSHd MACs"
      lineinfile: 
        dest: "{{ sysconfdir }}/ssh/sshd_config" 
        regexp: '^MACs' 
        line: 'MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com'
      when:
        - sshd_result.stat.exists == true

    - name: "[error] SSHd protocol version 2 only"
      lineinfile: 
        dest: "{{ sysconfdir }}/ssh/sshd_config" 
        regexp: '^Protocol 2' 
        line: 'Protocol 2'
      when:
        - sshd_result.stat.exists == true

    - name: "[error] SSHd no ecdsa-keys"
      lineinfile: 
        dest: "{{ sysconfdir }}/ssh/sshd_config"
        regexp: '^HostKey "{{ sysconfdir }}/ssh/ssh_host_ecdsa_key"'
        state: absent
      when:
        - sshd_result.stat.exists == true

    - name: "[error] SSHd no dsa-keys"
      lineinfile: 
        dest: "{{ sysconfdir }}/ssh/sshd_config"
        regexp: '^HostKey {{ sysconfdir }}/ssh/ssh_host_dsa_key'
        state: absent
      when:
        - sshd_result.stat.exists == true
 
    - name: "[error] SSHd only public key auth"
      lineinfile: 
        dest: "{{ sysconfdir }}/ssh/sshd_config" 
        regexp: '^#?AuthenticationMethods' 
        line: 'AuthenticationMethods publickey'
      when:
        - sshd_result.stat.exists == true

    - name: "[error] SSHd no password auth"
      lineinfile: 
        dest: "{{ sysconfdir }}/ssh/sshd_config"
        regexp: '^#?PasswordAuthentication' 
        line: 'PasswordAuthentication no'
      when:
        - sshd_result.stat.exists == true

    - name: "[error] SSHd No challenge response auth"
      lineinfile: 
        dest: "{{ sysconfdir }}/ssh/sshd_config" 
        regexp: '^#?ChallengeResponseAuthentication' 
        line: 'ChallengeResponseAuthentication no'
      when:
        - sshd_result.stat.exists == true
    
    - name: "[error] SSHd enable public key auth"
      lineinfile: 
        dest: "{{ sysconfdir }}/ssh/sshd_config" 
        regexp: '^#?PubkeyAuthentication' 
        line: 'PubkeyAuthentication yes'
      when:
        - sshd_result.stat.exists == true
 
    - name: "[error] SSHd no root login"
      lineinfile: 
        dest: "{{ sysconfdir }}/ssh/sshd_config" 
        regexp: '^PermitRootLogin'
        line: 'PermitRootLogin No'
      when:
        - sshd_result.stat.exists == true
 
    - name: "[warning] SSHd enable privilegde seperation"
      lineinfile: 
        dest: "{{ sysconfdir }}/ssh/sshd_config"
        regexp: '^UsePrivilegeSeparation'
        line: 'UsePrivilegeSeparation sandbox'
      when:
        - sshd_result.stat.exists == true
    